<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wawa.IO</name>
    </assembly>
    <members>
        <member name="T:Wawa.IO.Config">
            <summary>Implementations for <see cref="T:Wawa.IO.Config`1"/>.</summary>
        </member>
        <member name="F:Wawa.IO.Config.Folder">
            <summary>The name of the folder that contains locally stored mod settings.</summary>
        </member>
        <member name="F:Wawa.IO.Config.Suffix">
            <summary>The suffix for the default file name for mod settings.</summary>
        </member>
        <member name="F:Wawa.IO.Config.Tutorial">
            <summary>The key substring that is ignored in mod configs.</summary>
        </member>
        <member name="M:Wawa.IO.Config.Serialize``1(``0)">
            <summary>Serializes settings the same way it's written to the file. Supports settings that use enums.</summary>
            <typeparam name="TSerialize">The type to serialize the value.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>A <see cref="T:System.String"/> representation of <paramref name="value"/> by serializing it as JSON.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Write``1(Wawa.IO.Config{``0},System.String)">
            <summary>Writes the string to the settings file.</summary>
            <remarks><para>
            To protect the user settings, this does nothing if the last read wasn't successful.
            </para><para>
            In the editor, this method does nothing.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that"/>.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1"/>.</param>
            <param name="value">The contents to write.</param>
            <returns>The parameter <paramref name="that"/>.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Write``1(Wawa.IO.Config{``0},``0)">
            <summary>Writes the settings to the settings file.</summary>
            <remarks><para>
            To protect the user settings, this does nothing if the last read wasn't successful.
            </para><para>
            In the editor, this method does nothing.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that"/>.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1"/>.</param>
            <param name="value">The value to overwrite the settings file with.</param>
            <returns>The value <see langword="default"/>.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Merge``1(Wawa.IO.Config{``0},``0,System.Boolean)">
            <summary>Reads, merges, and writes the settings to the settings file.</summary>
            <remarks><para>
            To protect the user settings, this does nothing if the last read wasn't successful.
            </para><para>
            In the editor, this method does nothing.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that"/>.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1"/>.</param>
            <param name="value">The value to merge the file with.</param>
            <param name="isDiscarding">Determines whether it should remove values from the original
            file that isn't contained within the type, or has the incorrect type.</param>
            <returns>The parameter <paramref name="that"/>.</returns>
        </member>
        <member name="M:Wawa.IO.Config.Read``1(Wawa.IO.Config{``0})">
            <summary>Reads the settings from the settings file.</summary>
            <remarks><para>
            If the settings couldn't be read, the default settings will be returned.
            </para><para>
            In the editor, this method returns the default value of the constructor in <typeparamref name="T"/>.
            </para></remarks>
            <typeparam name="T">The generic used in <paramref name="that"/>.</typeparam>
            <param name="that">This instance of <see cref="T:Wawa.IO.Config`1"/>.</param>
            <returns>
            If the read and deserialization was successful, a <typeparamref name="T"/> containing the values from the file,
            otherwise a new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="T:Wawa.IO.Config`1">
            <summary>Meant for information that needs to be deserialized within the mod settings folder.</summary>
            <remarks><para>
            Originally by samfundev: https://github.com/samfundev/KTANE-Utilities/blob/master/ModConfig.cs.
            </para><para>
            All constructors in this type have the following side effects:
            </para><list type="bullet">
            <item><description>A file will automatically be made if it doesn't exist.</description></item>
            <item><description>
            A JSON property defined in the type <typeparamref name="T"/> that doesn't exist in the file
            will automatically be appended with a new default instance of <typeparamref name="T"/>'s values.
            </description></item>
            <item><description>
            In the editor, this constructor will not merge the default of type <typeparamref name="T"/> with the file.
            </description></item>
            </list></remarks>
            <typeparam name="T">The type to serialize and deserialize the file.</typeparam>
        </member>
        <member name="M:Wawa.IO.Config`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Wawa.IO.Config`1"/> class.</summary>
            <remarks><list type="bullet">
            <item><description>
            The target file name is implicitly gotten by the name of the assembly that called this constructor.
            </description></item>
            <item><description>A file will automatically be made if it doesn't exist.</description></item>
            <item><description>
            A JSON property defined in the type <typeparamref name="T"/> that doesn't exist in the file
            will automatically be appended with a new default instance of <typeparamref name="T"/>'s values.
            </description></item>
            <item><description>
            In the editor, this constructor will not merge the default of type <typeparamref name="T"/> with the file.
            </description></item>
            </list></remarks>
        </member>
        <member name="M:Wawa.IO.Config`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.IO.Config`1"/> class.</summary>
            <remarks><list type="bullet">
            <item><description>Allows specification of the target file name.</description></item>
            <item><description>A file will automatically be made if it doesn't exist.</description></item>
            <item><description>
            A JSON property defined in the type <typeparamref name="T"/> that doesn't exist in the file
            will automatically be appended with a new default instance of <typeparamref name="T"/>'s values.
            </description></item>
            <item><description>
            In the editor, this constructor will not merge the default of type <typeparamref name="T"/> with the file.
            </description></item>
            </list></remarks>
            <param name="fileName">The file name to get.</param>
        </member>
        <member name="P:Wawa.IO.Config`1.HasRead">
            <summary>Gets a value indicating whether or not there has been a successful read of the settings file.</summary>
            <remarks><para>This value will always be false in the editor.</para></remarks>
        </member>
        <member name="P:Wawa.IO.Config`1.FilePath">
            <summary>Gets the path of the file to read and write.</summary>
        </member>
        <member name="M:Wawa.IO.Config`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.Config`1.Equals(Wawa.IO.Config{`0},Wawa.IO.Config{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.Config`1.GetHashCode(Wawa.IO.Config{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.Config`1.Equals(Wawa.IO.Config{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.Config`1.op_Equality(Wawa.IO.Config{`0},Wawa.IO.Config{`0})">
            <summary>Determines whether both instances are both <see langword="null"/> or both instances.</summary>
            <param name="left">The left-hand side operator.</param>
            <param name="right">The right-hand side operator.</param>
            <returns>
            The value <see langword="true"/> if both share the same <see cref="P:Wawa.IO.Config`1.FilePath"/>,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.IO.Config`1.op_Inequality(Wawa.IO.Config{`0},Wawa.IO.Config{`0})">
            <summary>Determines whether both instances are one of <see langword="null"/> and the other instanced.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both do not share the same <see cref="P:Wawa.IO.Config`1.FilePath"/>,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.IO.Config`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.Config`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.Config`1.ToString">
            <summary>
            Deserializes, then re-serializes the file according to <see cref="M:Wawa.IO.Config.Serialize``1(``0)"/>.
            In the editor, this method serializes the default value of the constructor in <typeparamref name="T"/>.
            </summary>
            <returns>A string representation of the value from <see cref="M:Wawa.IO.Config.Read``1(Wawa.IO.Config{``0})"/>.</returns>
        </member>
        <member name="T:Wawa.IO.Internals.Globals">
            <summary>Contains static methods able to be accessed from anywhere within this library.</summary>
        </member>
        <member name="F:Wawa.IO.Internals.Globals.Ordinal">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.SuppressIO``1(``0,System.Action{``0}@)">
            <summary>Runs and catches various exception types found in IO operations.</summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="item">The item to pass in.</param>
            <param name="action">The name to run.</param>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.OrdinalEquals(System.String,System.String@)">
            <summary>Compares two strings based on <see cref="F:System.StringComparison.Ordinal"/>.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>Whether the two values are the same based on <see cref="F:System.StringComparison.Ordinal"/>.</returns>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.Get``2(``0,System.Func{``0,``1}@,System.Func{``0,``1}@)">
            <summary>Computes an expensive computation, then caches it in subsequent calls.</summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of return.</typeparam>
            <param name="key">The parameter of the method.</param>
            <param name="factory">The expensive callback.</param>
            <param name="editor">The expensive callback exclusive to the editor.</param>
            <returns>The value from the first time <paramref name="factory" /> was invoked.</returns>
        </member>
        <member name="M:Wawa.IO.Internals.Globals.SuppressIO``2(``0,System.Func{``0,``1}@,System.Boolean@)">
            <summary>
            Runs and returns the parameter, and catches various exception types found in IO operations.
            A caught <see cref="T:System.Exception" /> will <see langword="return" /> <see langword="default" />.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <typeparam name="TResult">The type of return.</typeparam>
            <param name="item">The item to pass in.</param>
            <param name="func">The name to run.</param>
            <param name="force">Whether to force execution regardless if in editor or not.</param>
            <returns>
            The returned value of <paramref file="func" />, or <see langword="default" />
            in the event of an <see cref="T:System.Exception" /> related to files.
            </returns>
        </member>
        <member name="T:Wawa.IO.ModInfo">
            <summary>
            Contains the properties needed to perform JSON-deserialization
            of a modInfo.json located in the root directory of a mod.
            </summary>
        </member>
        <member name="F:Wawa.IO.ModInfo.FileName">
            <summary>The file name used for this type.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Author">
            <summary>Gets the author(s) of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Description">
            <summary>Gets the description of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Id">
            <summary>Gets the id of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Title">
            <summary>Gets the title of the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.UnityVersion">
            <summary>Gets the Unity version used to compile the mod.</summary>
        </member>
        <member name="P:Wawa.IO.ModInfo.Version">
            <summary>Gets the version number of the mod.</summary>
        </member>
        <member name="M:Wawa.IO.ModInfo.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.ModInfo.Equals(Wawa.IO.ModInfo,Wawa.IO.ModInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.ModInfo.GetHashCode(Wawa.IO.ModInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.ModInfo.Equals(Wawa.IO.ModInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.ModInfo.op_Equality(Wawa.IO.ModInfo,Wawa.IO.ModInfo)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true"/> if both instances contain the same values.</returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.op_Inequality(Wawa.IO.ModInfo,Wawa.IO.ModInfo)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>The value <see langword="true"/> if both instances do not contain the same values.</returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.Deserialize(System.String)">
            <summary>Tries to deserialize the parameter as <see cref="T:Wawa.IO.ModInfo"/>.</summary>
            <param name="contents">The contents to a modInfo.json.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1"/> containing either a <see langword="new"/> instance
            of <see cref="T:Wawa.IO.ModInfo"/> which has the information of the file if the serialization is successful,
            or no value if the file couldn't be read/located.
            </returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.ReadThenDeserialize(System.String)">
            <summary>
            Attempts to read the specified path to try to deserialize its contents as <see cref="T:Wawa.IO.ModInfo"/>.
            </summary>
            <param name="filePath">The contents to a modInfo.json.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1"/> containing either a <see langword="new"/> instance
            of <see cref="T:Wawa.IO.ModInfo"/> which has the information of the file if the serialization is successful,
            or no value if the file couldn't be read/located.
            </returns>
        </member>
        <member name="M:Wawa.IO.ModInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.ModInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.ModInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.IO.ModInfo.FromInternalModInfo(System.Object)">
            <summary>Creates a <see cref="T:Wawa.IO.ModInfo"/> from the same type in the game.</summary>
            <param name="metadata">The instance containing the metadata of the mod.</param>
            <returns>
            A new <see cref="T:Wawa.IO.ModInfo"/> instance containing the same data as <paramref name="metadata"/>,
            or the default instance if <paramref name="metadata"/> isn't the type from the game.
            </returns>
        </member>
        <member name="T:Wawa.IO.PathFinder">
            <summary>Access to the paths and contents of files within folder mod directory.</summary>
        </member>
        <member name="P:Wawa.IO.PathFinder.Caller">
            <summary>Gets the <see cref="T:System.Reflection.AssemblyName"/> of the caller that invoked the method calling this.</summary>
            <remarks><para>This is used by the library to log itself, and obtain information about callers.</para></remarks>
        </member>
        <member name="P:Wawa.IO.PathFinder.Who">
            <summary>Gets the name of <see cref="P:Wawa.IO.PathFinder.Caller"/>.</summary>
        </member>
        <member name="P:Wawa.IO.PathFinder.Which">
            <summary>Gets the version of <see cref="P:Wawa.IO.PathFinder.Caller"/>.</summary>
        </member>
        <member name="M:Wawa.IO.PathFinder.AssemblyLog(System.String)">
            <summary>Logs a message to the Unity Console with the assembly's name that called this.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetDirectory(System.String)">
            <summary>Gets the absolute directory of the mod.</summary>
            <param name="modId">
            The mod id to get the mod directory from.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <exception cref="T:System.InvalidOperationException">
            A loaded mod has a null mod id, or has an id that conflicts with another loaded mod.
            </exception>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either folder <see cref="T:System.String" /> of the absolute directory
            of the file if there is a folder mod id entry within the game's mod dictionary, or <see langword="default" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetFile(System.String,System.String)">
            <summary>Gets the absolute directory of the file located inside the mod directory.</summary>
            <param name="filePath">The file located inside folder mod directory.</param>
            <param name="modId">
            The mod id to get the mod directory from.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <exception cref="T:System.InvalidOperationException">
            A loaded mod has a null mod id, or has an id that conflicts with another loaded mod.
            </exception>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either folder <see cref="T:System.String" /> of the absolute directory
            of the file if the mod directory and file were found, or <see langword="default" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetModInfo(System.String)">
            <summary>Gets and deserializes the <see cref="T:Wawa.IO.ModInfo" /> file located in every mod's root directory.</summary>
            <param name="modId">
            The mod id to get the mod directory from.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either folder <see cref="T:Wawa.IO.ModInfo" /> if the file was read
            and deserialized successfully, or <see langword="default" />.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetAssets``1(System.String,System.String)">
            <summary>Loads and returns assets from disk.</summary>
            <typeparam name="T">The type of asset to get.</typeparam>
            <param name="filePath">The file which contains the assets.</param>
            <param name="modId">
            The mod id to get the mod directory from.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1" />, consisting of either an <see cref="T:System.Array" /> of <typeparamref file="T" />
            from the assets in the file specified, or <see langword="default" /> in the event of an error.
            </returns>
        </member>
        <member name="M:Wawa.IO.PathFinder.GetUnmanaged``1(System.String,System.String,System.String)">
            <summary>Gets an unmanaged function from an external library.</summary>
            <typeparam name="T">The signature of the function.</typeparam>
            <param name="libPath">The external file.</param>
            <param name="ffiMethodName">The name of the method.</param>
            <param name="modId">
            The mod id to get the mod directory from.
            If <see langword="null" />, implicitly gets the directory of the mod from the file of the assembly.
            </param>
            <exception cref="T:System.InvalidOperationException">
            A loaded mod has a null mod id, or has an id that conflicts with another loaded mod.
            </exception>
            <returns>
            The value <see langword="true" /> if copying the file was successful, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
            the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute"/> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.
            The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the
            listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/>
            class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and AttributeTargets.Property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or AttributeTargets.Property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members
            have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Gets the optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>Used to indicate a byref escapes and is not scoped.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/> class.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called in its containing module's initializer.
            </summary>
            <remarks><para>
            When one or more valid methods with this attribute are found in a compilation,
            the compiler will emit a module initializer that calls each of the attributed methods.<br />
            Certain requirements are imposed on any method targeted with this attribute:
            </para><list type="bullet">
            <item><description>The method must be <see langword="static"/>.</description></item>
            <item><description>
            The method must be an ordinary member method, as opposed to a property accessor,
            constructor, local function, and so on.
            </description></item>
            <item><description>The method must be parameterless..</description></item>
            <item><description>The method must return <see langword="void"/>.</description></item>
            <item><description>The method must not be generic or be contained in a generic type.</description></item>
            <item><description>
            The method's effective accessibility must be <see langword="internal"/> or <see langword="public"/>.
            </description></item>
            </list><para>
            For more information, see
            https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller.
            This is the file path at the time of compile.
            </summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/> attribute to an optional parameter that has a default value.
            You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>Indicates that a parameter captures the expression passed for another parameter as a string.</summary>
            <remarks><para>This attribute is implemented in the compiler for C# 10 and later versions only.</para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.</summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>Gets the name of the parameter whose expression should be captured as a string.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks><para>
            This attribute is unsafe because it may reveal uninitialized memory to the application in certain
            instances (e.g., reading from uninitialized stackalloc'd memory). If applied to a method directly,
            the attribute applies to that method and all nested functions (lambdas, local functions) below it.
            If applied to a type or module, it applies to all methods nested inside. This attribute is intentionally
            not permitted on assemblies. Use at the module level instead to apply to multiple type declarations.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Indicates that an API is in preview. This attribute allows call sites to be
            flagged with a diagnostic that indicates that a preview feature is used.
            Authors can use this attribute to ship preview features in their assemblies.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Message">
            <summary>Gets the optional message associated with this attribute instance.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Url">
            <summary>Gets or sets the optional URL associated with this attribute instance.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is
            required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> class.</summary>
            <param name="featureName">The name of the compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>Gets the name of the compiler feature.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether the compiler can choose to allow access to the location
            where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineArrayAttribute.Length">
            <summary>Gets the length of the inlined array.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Instructs the System.Text.RegularExpressions source generator to
            generate an implementation of the specified regular expression.
            </summary>
            <remarks>
            <para>
            The generator associated with this attribute only supports C#. It only supplies an implementation when applied
            to static, partial, parameterless, non-generic methods that are typed to return <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </para>
            <para>
            When the <see cref="T:System.Text.RegularExpressions.Regex"/> supports case-insensitive matches (either by passing
            <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> or using the inline <c>(?i)</c> switch in the pattern) the regex engines
            will use an internal casing table to transform the passed in pattern into an equivalent case-sensitive one.
            For example, given the pattern <c>abc</c>, the engines will transform it to the equivalent pattern
            <c>[Aa][Bb][Cc]</c>. The equivalences found in this internal casing table can change over time, for example in
            the case new characters are added to a new version of Unicode. When using the source generator, this
            transformation happens at compile time, which means the casing table used to find the equivalences will depend
            on the target framework at compile time. This differs from the rest of the <see cref="T:System.Text.RegularExpressions.Regex"/> engines, which
            perform this transformation at run-time, meaning they will always use casing table for the current runtime.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/> class with the specified pattern.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by Windows
            (https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c).
            Culture names follow the standard defined by BCP 47 (https://tools.ietf.org/html/bcp47). In addition,
            starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.</param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the list of
            language/region names supported by Windows
            (https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c).
            Culture names follow the standard defined by BCP 47 (https://tools.ietf.org/html/bcp47). In addition,
            starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds">
            <summary>
            Gets a time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName">
            <summary>Gets the name of the culture to be used for case sensitive comparisons.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern">
            <summary>Gets the regular expression pattern to match.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Options">
            <summary>Gets a bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.MatchAttribute">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="M:Emik.MatchAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>Initializes a new instance of the <see cref="T:Emik.MatchAttribute"/> class.</summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">The bitwise combination of the enumeration values that modify the regular expression.</param>
        </member>
        <member name="P:Emik.MatchAttribute.Pattern">
            <summary>Gets the regular expression to match.</summary>
        </member>
        <member name="P:Emik.MatchAttribute.Options">
            <summary>Gets the bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.RegexDeconstructors">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
    </members>
</doc>
