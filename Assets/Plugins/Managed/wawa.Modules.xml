<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wawa.Modules</name>
    </assembly>
    <members>
        <member name="T:Wawa.Modules.Internals.Globals">
            <summary>Contains static methods able to be accessed from anywhere within this library.</summary>
        </member>
        <member name="F:Wawa.Modules.Internals.Globals.Ordinal">
            <summary>The default string comparison throughout the library.</summary>
        </member>
        <member name="M:Wawa.Modules.Internals.Globals.ToReadOnly``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1}@)">
            <summary>Enumerates a sequence twice with a selector and produces an immutable array of its contents.</summary>
            <typeparam name="TSource">The type of element in the inputting sequence.</typeparam>
            <typeparam name="TResult">The type of element in the resulting sequence.</typeparam>
            <param name="items">The sequence to enumerate.</param>
            <param name="selector">The selector for each item.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="T:Wawa.Modules.ISolvable">
            <summary>
            Interface for Twitch Plays auto-solvers. Used by <see cref="T:System.Reflection.Module"/> to abstractly communicate
            with Twitch Plays solvers without importing the namespace.
            </summary>
        </member>
        <member name="P:Wawa.Modules.ISolvable.IsTP">
            <summary>Gets a value indicating whether Twitch Plays is currently active.</summary>
            <remarks><para>
            This is for modules that need to display different items, or use different rules if Twitch Plays is active.
            </para><para>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>,
            therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in
            <see cref="F:KMBombModule.OnActivate"/> or later.
            </para></remarks>
        </member>
        <member name="M:Wawa.Modules.ISolvable.ForceTPSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks><para>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </para></remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="T:Wawa.Modules.ModdedModule">
            <summary>
            A <see cref="T:UnityEngine.Component"/> that handles general Keep Talking and Nobody Explodes modded module behaviour.
            </summary>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Children">
            <summary>Gets the children of the top-level selectable.</summary>
            <exception cref="T:UnityEngine.MissingComponentException">
            There is no <see cref="T:KMSelectable"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </exception>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Matrix">
            <summary>Gets the children of the top-level selectable.</summary>
            <remarks><para>
            Unlike <see cref="P:Wawa.Modules.ModdedModule.Children"/>, this returns a 2-dimensional list by mapping
            it with inference from <see cref="F:KMSelectable.ChildRowLength"/>.
            </para></remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:KMSelectable"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/> has a
            <see cref="F:KMSelectable.ChildRowLength"/> value of 0.
            </exception>
            <exception cref="T:UnityEngine.MissingComponentException">
            There is no <see cref="T:KMSelectable"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </exception>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Status">
            <summary>Gets the current solve/strike status of the module.</summary>
        </member>
        <member name="P:Wawa.Modules.ModdedModule.Id">
            <summary>
            Gets the mod id. Override this if you are working with an assembly with a different name than your mod id.
            </summary>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Awake">
            <summary>Logs version numbers. Be sure to call this method if you are implementing Awake.</summary>
            <exception cref="T:System.InvalidOperationException">
            A loaded mod has a null mod id, or has an id that conflicts with another loaded mod.
            </exception>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnEnable">
            <summary>
            Unsubscribes <see cref="E:UnityEngine.Application.logMessageReceived"/> and <see cref="F:KMBombModule.OnActivate"/>.
            </summary>
            <remarks><para>It is recommended to invoke the base method when overriding this method.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnDisable">
            <summary>
            Subscribes <see cref="E:UnityEngine.Application.logMessageReceived"/> and <see cref="F:KMBombModule.OnActivate"/>.
            </summary>
            <remarks><para>It is recommended to invoke the base method when overriding this method.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Play(Wawa.Modules.Sound[])">
            <summary>Plays one or more sounds from the module <see cref="T:UnityEngine.Transform"/>.</summary>
            <exception cref="T:System.InvalidOperationException">
            There isn't exactly 1 <see cref="T:KMAudio"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </exception>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Play(UnityEngine.Transform,Wawa.Modules.Sound[])">
            <summary>Plays one or more sounds from a specified <see cref="T:UnityEngine.Transform"/>.</summary>
            <exception cref="T:System.InvalidOperationException">
            There isn't exactly 1 <see cref="T:KMAudio"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </exception>
            <param name="location">The source of the sound.</param>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.PlayEnum``1(``0,UnityEngine.Transform)">
            <summary>Plays one or more sounds from a specified <see cref="T:UnityEngine.Transform"/>.</summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <exception cref="T:System.InvalidOperationException">
            There isn't exactly 1 <see cref="T:KMAudio"/> <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </exception>
            <param name="sounds">The sounds to play.</param>
            <param name="location">The source of the sound.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Shake(KMSelectable,System.Single,Wawa.Modules.Sound[])">
            <summary>Plays sounds and shakes the bomb from a selectable.</summary>
            <param name="selectable">The source of the interaction punch and sound source.</param>
            <param name="intensityModifier">The intensity of the interaction punch.</param>
            <param name="sounds">The sounds to play.</param>
            <returns>The parameter <paramref name="selectable"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Solve(System.String,System.Object[])">
            <summary>Solves the module.</summary>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The value <see langword="default"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])">
            <summary>Strikes the module.</summary>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The value <see langword="default"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs and formats a message to the Unity Console in a format compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="logType">The kind of logging method to invoke.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.Log``1(``0,System.Object[])">
            <summary>
            Logs and formats a message to the Unity Console in a format compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.LogLower``1(``0,UnityEngine.LogType)">
            <summary>
            Logs and formats a message to the Unity Console in a format not compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="logType">The kind of logging method to invoke.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.LogLower``1(``0,System.Object[])">
            <summary>
            Logs and formats a message to the Unity Console in a format not compliant with the Logfile Analyzer.
            </summary>
            <typeparam name="T">The type of the value to log.</typeparam>
            <param name="format">The value to log.</param>
            <param name="args">The arguments to hook into format.</param>
            <returns>The parameter <paramref name="format"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnActivate">
            <summary>The method that is called when the lights are turned on. Automatically hooked in Awake.</summary>
            <remarks><para>The base method doesn't do anything; Calling this base method is a no-op.</para></remarks>
        </member>
        <member name="M:Wawa.Modules.ModdedModule.OnException(System.String)">
            <summary>
            The method that is called when an unhandled <see cref="T:System.Exception"/> is thrown by this module type.
            </summary>
            <param name="message">The message of the <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:Wawa.Modules.Sound">
            <summary>
            Encapsulates a modded or vanilla sound effect, with methods to play the sound, and allowing you to extend
            into the <see cref="T:KMAudio.KMAudioRef"/> instance that spawns from playing a sound effect.
            </summary>
            <content>Static properties for each sound effect from the vanilla game.</content>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.Sound"/> class.</summary>
            <param name="sound">The name of the modded sound to use.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(UnityEngine.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Wawa.Modules.Sound"/> class. Uses the name of the <see cref="T:UnityEngine.AudioClip"/>.
            </summary>
            <param name="sound">The <see cref="T:UnityEngine.Object"/> of the modded sound to use, getting its name.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.#ctor(KMSoundOverride.SoundEffect)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.Sound"/> class.</summary>
            <param name="sound">The vanilla sound to use.</param>
        </member>
        <member name="P:Wawa.Modules.Sound.Modded">
            <summary>
            Gets the modded sound passed in as <see cref="T:Wawa.Optionals.Maybe`1"/> due to ambiguity in this value being set.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Vanilla">
            <summary>
            Gets the vanilla sound passed in as <see cref="T:Wawa.Optionals.Maybe`1"/> due to ambiguity in this value being set.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Reference">
            <summary>Gets the instance of the <see cref="T:KMAudio.KMAudioRef"/> created from playing a sound.</summary>
        </member>
        <member name="M:Wawa.Modules.Sound.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.GetHashCode(Wawa.Modules.Sound)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(Wawa.Modules.Sound)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Implicit(System.String)~Wawa.Modules.Sound">
            <summary>Implicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:System.String"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Explicit(UnityEngine.Object)~Wawa.Modules.Sound">
            <summary>Explicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:UnityEngine.Object"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Implicit(KMSoundOverride.SoundEffect)~Wawa.Modules.Sound">
            <summary>Implicitly calls the constructor.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect"/> to pass in to the constructor.</param>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Equality(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances contain the same values, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.Sound.op_Inequality(Wawa.Modules.Sound,Wawa.Modules.Sound)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances do not contain the same values,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromString(System.String)">
            <summary>Converts the <see cref="T:System.String"/> to a <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/>.</summary>
            <param name="sound">The <see cref="T:System.String"/> instance to convert.</param>
            <returns>A <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/> instance encapsulating <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromObject(UnityEngine.Object)">
            <summary>Converts the <see cref="T:UnityEngine.Object"/> to a <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/>.</summary>
            <param name="sound">The <see cref="T:UnityEngine.Object"/> instance to convert.</param>
            <returns>A <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/> instance encapsulating <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.FromSoundEffect(KMSoundOverride.SoundEffect)">
            <summary>Converts the <see cref="T:KMSoundOverride.SoundEffect"/> to a <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/>.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect"/> instance to convert.</param>
            <returns>A <see langword="new"/> <see cref="T:Wawa.Modules.Sound"/> instance encapsulating <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Sound.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.Sound.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Wawa.Modules.Sound.Vanillas">
            <summary>Gets all vanilla sounds from the base game.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.AlarmClockBeep">
            <summary>Gets the sound that plays when the alarm clock goes off. This sound loops.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.AlarmClockSnooze">
            <summary>Gets the sound that plays when you hit snooze button on the alarm clock.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BigButtonPress">
            <summary>Gets the sound that plays when pressing down the button on the Big Button vanilla module.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BigButtonRelease">
            <summary>Gets the sound that plays when releasing the button on the Big Button vanilla module.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BinderDrop">
            <summary>Gets the sound that plays as the mission binder hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombDefused">
            <summary>
            Gets the sound that plays immediately after a bomb is defused
            and before <see cref="F:KMSoundOverride.SoundEffect.GameOverFanfare"/>.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombDrop">
            <summary>Gets the sound that plays when the bomb is set down on the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BombExplode">
            <summary>Gets the sound that plays when the bomb explodes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BriefcaseClose">
            <summary>Gets the sound that plays when the freeplay briefcase is closed.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.BriefcaseOpen">
            <summary>Gets the sound that plays when the freeplay briefcase is opened.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.ButtonPress">
            <summary>Gets the sound that plays when pressing down a button.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.ButtonRelease">
            <summary>Gets the sound that plays when releasing a button.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.CapacitorPop">
            <summary>Gets the sound that plays when Capacitor Discharge fills up completely.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.CorrectChime">
            <summary>Gets the sound that plays in the tutorial for completing a step correctly.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.DossierOptionPressed">
            <summary>Gets the sound that plays when you change a setting in the menu folder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.EmergencyAlarm">
            <summary>
            Gets the sound that plays when there is less than a minute left on the bomb, this sound loops.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FastestTimerBeep">
            <summary>Gets the sound that plays when the bomb has at least 2 or more strikes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FastTimerBeep">
            <summary>Gets the sound that plays when the bomb has 1 strike.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.FreeplayDeviceDrop">
            <summary>Gets the sound that plays as the freeplay briefcase hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.GameOverFanfare">
            <summary>Gets the sound that plays when all bombs are defused. Finishes before the post game screen.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.LightBuzz">
            <summary>Gets the sound that plays when the lights go out.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.LightBuzzShort">
            <summary>Gets the sound that plays when the lights start to come back on.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.MenuButtonPressed">
            <summary>Gets the sound that plays when you start a mission from the mission binder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.MenuDrop">
            <summary>Gets the sound that plays as the mission folder hits the desk.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NeedyActivated">
            <summary>Gets the sound that plays when a needy gets activated.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NeedyWarning">
            <summary>Gets the sound that plays when a needy is running out of time. This sound loops.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.NormalTimerBeep">
            <summary>Gets the sound that plays when the bomb has no strikes.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.PageTurn">
            <summary>Gets the sound that plays when a page is turned in the Missions binder.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.SelectionTick">
            <summary>Gets the sound that plays as you hover over something interactable.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Stamp">
            <summary>
            Gets the sound that plays during the post game screen, when either the defused
            or exploded text is stamped onto the binder.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Strike">
            <summary>Gets the sound that plays when you get a strike.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.Switch">
            <summary>Gets the sound that plays when a switch is toggled.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.TitleMenuPressed">
            <summary>Gets the sound that plays when pressing a button in one of the tutorials.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.TypewriterKey">
            <summary>
            Gets the sound that plays during the post game screen as the mission information gets typed out.
            </summary>
        </member>
        <member name="P:Wawa.Modules.Sound.WireSequenceMechanism">
            <summary>Gets the sound that plays when switching between sets of wires in Wire Sequence.</summary>
        </member>
        <member name="P:Wawa.Modules.Sound.WireSnip">
            <summary>Gets the sound that plays when a wire is cut on a module like Complicated Wires.</summary>
        </member>
        <member name="T:Wawa.Modules.SoundCore">
            <summary>Implementations for <see cref="T:Wawa.Modules.Sound"/>.</summary>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Play(Wawa.Modules.Sound,KMAudio,UnityEngine.Transform,System.Boolean)">
            <summary>Plays the current sound that is stored.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound"/>.</param>
            <param name="audio">The <see cref="T:KMAudio"/> to play it from.</param>
            <param name="transform">The <see cref="T:UnityEngine.Transform"/>, which is needed for the location of the sound.</param>
            <param name="isLooping">Indicates whether the sound should loop.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1"/>, consisting of either a <see cref="T:KMAudio.KMAudioRef"/>,
            or <see langword="default"/> if <see cref="T:KMAudio"/> is unable to play a sound,
            usually caused by playing too many sounds at once.
            </returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.AsSound(System.String)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound"/> where <see cref="P:Wawa.Modules.Sound.Modded"/> is set.</summary>
            <param name="sound">The <see cref="T:System.String"/> to pass in <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>A new instance of <see cref="T:Wawa.Modules.Sound"/> which encapsulates <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.AsSound(KMSoundOverride.SoundEffect)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound"/> where <see cref="P:Wawa.Modules.Sound.Vanilla"/> is set.</summary>
            <param name="sound">The <see cref="T:KMSoundOverride.SoundEffect"/> to pass in <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>A new instance of <see cref="T:Wawa.Modules.Sound"/> which encapsulates <paramref name="sound"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Stop(Wawa.Modules.Sound)">
            <summary>Gets the <see cref="P:Wawa.Modules.Sound.Reference"/> and stops the sound if it is playing.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>The parameter <paramref name="that"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSound(UnityEngine.AudioClip)">
            <summary>Creates an instance of <see cref="T:Wawa.Modules.Sound"/> where <see cref="P:Wawa.Modules.Sound.Modded"/> is set.</summary>
            <param name="sound">The <see cref="T:UnityEngine.AudioClip"/> to pass in <see cref="T:Wawa.Modules.Sound"/>.</param>
            <returns>
            A new instance of <see cref="T:Wawa.Modules.Sound"/> which encapsulates the name of <paramref name="sound"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            where each element has been converted.
            </summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{KMSoundOverride.SoundEffect})">
            <summary>
            Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            where each element has been converted.
            </summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.ToSounds(System.Collections.Generic.IEnumerable{UnityEngine.AudioClip})">
            <summary>
            Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            where each element has been converted.
            </summary>
            <param name="sounds">The collection.</param>
            <returns>An immutable array.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Stop``1(``0)">
            <summary>
            Gets the <see cref="P:Wawa.Modules.Sound.Reference"/> of a collection of sounds and stops the sound if it is playing.
            </summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="sounds">The multiple <see cref="T:Wawa.Modules.Sound"/> instances to each call <see cref="M:Wawa.Modules.SoundCore.Stop(Wawa.Modules.Sound)"/> on.</param>
            <returns>The parameter <paramref name="sounds"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.SoundCore.Play(System.Collections.Generic.IEnumerable{Wawa.Modules.Sound},KMAudio,UnityEngine.Transform,System.Boolean)">
            <summary>Plays the current sound that is stored.</summary>
            <param name="that">This instance of <see cref="T:Wawa.Modules.Sound"/>.</param>
            <param name="audio">The <see cref="T:KMAudio"/> to play it from.</param>
            <param name="transform">The <see cref="T:UnityEngine.Transform"/>, which is needed for the location of the sound.</param>
            <param name="isLooping">Indicates whether the sound should loop.</param>
            <returns>
            A <see cref="T:Wawa.Optionals.Maybe`1"/>, consisting of either a <see cref="T:KMAudio.KMAudioRef"/>,
            or <see langword="default"/> if <see cref="T:KMAudio"/> is unable to play a sound,
            usually caused by playing too many sounds at once.
            </returns>
        </member>
        <member name="T:Wawa.Modules.State">
            <summary>Encapsulation of status conditions for a <see cref="T:Wawa.Modules.ModdedModule"/>.</summary>
        </member>
        <member name="M:Wawa.Modules.State.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Wawa.Modules.State"/> class.</summary>
            <param name="name">
            The <see cref="T:System.String"/> containing the module id which is used to assign <see cref="P:Wawa.Modules.State.Id"/>.
            </param>
        </member>
        <member name="P:Wawa.Modules.State.HasStruck">
            <summary>
            Gets or sets a value indicating whether the module has ever called <see cref="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="P:Wawa.Modules.State.IsSolved">
            <summary>Gets a value indicating whether the module is solved.</summary>
        </member>
        <member name="P:Wawa.Modules.State.Id">
            <summary>Gets the unique module id of this module type, primarily used in logging.</summary>
        </member>
        <member name="P:Wawa.Modules.State.HasException">
            <summary>
            Gets or sets a value indicating whether the module has thrown an unhandled <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:Wawa.Modules.State.Strikes">
            <summary>Gets or sets the amount of times <see cref="M:Wawa.Modules.ModdedModule.Strike(System.String,System.Object[])"/> was called.</summary>
        </member>
        <member name="M:Wawa.Modules.State.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.Equals(Wawa.Modules.State,Wawa.Modules.State)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.GetHashCode(Wawa.Modules.State)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.Equals(Wawa.Modules.State)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.op_Equality(Wawa.Modules.State,Wawa.Modules.State)">
            <summary>Determines whether both instances contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances contain the same values, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.State.op_Inequality(Wawa.Modules.State,Wawa.Modules.State)">
            <summary>Determines whether both instances do not contain the same values.</summary>
            <param name="left">The left-hand side.</param>
            <param name="right">The right-hand side.</param>
            <returns>
            The value <see langword="true"/> if both instances do not contain the same values,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Wawa.Modules.State.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Wawa.Modules.State.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Wawa.Modules.Stringifier">
            <summary>Provides stringification methods.</summary>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>Joins a set of values into one long <see cref="T:System.String"/>.</summary>
            <remarks><para>
            This method is more efficient than using
            <see cref="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.String)"/> for <see cref="T:System.Char"/> separators.
            </para></remarks>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>One long <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Conjoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Joins a set of values into one long <see cref="T:System.String"/>.</summary>
            <typeparam name="T">The type of each item in the collection.</typeparam>
            <param name="values">The values to join.</param>
            <param name="separator">The separator between each item.</param>
            <returns>One long <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.UnfoldedName(System.Type)">
            <summary>Gets the type name, with its generics extended.</summary>
            <param name="type">The <see cref="T:System.Type"/> to get the name of.</param>
            <returns>The name of the parameter <paramref name="type"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Nth(System.Int32,System.Boolean)">
            <summary>Converts a number to an ordinal.</summary>
            <param name="i">The number to convert.</param>
            <param name="indexByZero">Determines whether to index from zero or one.</param>
            <returns>The parameter <paramref name="i"/> as an ordinal.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Split(System.String,System.String)">
            <inheritdoc cref="M:System.String.Split(System.String[],System.StringSplitOptions)"/>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Stringify``1(``0)">
            <summary>
            Converts <paramref name="source"/> into a <see cref="T:System.String"/> representation of <paramref name="source"/>.
            </summary>
            <remarks><para>
            Unlike <see cref="M:System.Object.ToString"/>, the values of all properties are printed out,
            unless they explicitly define a <see cref="M:System.Object.ToString"/>, or implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            in which case each item within is printed out separately.
            </para></remarks>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String"/> representation of.</param>
            <returns><paramref name="source"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.Stringify``1(``0,System.Int32,System.Boolean)">
            <summary>
            Converts <paramref name="source"/> into a <see cref="T:System.String"/> representation of <paramref name="source"/>.
            </summary>
            <remarks><para>
            Unlike <see cref="M:System.Object.ToString"/>, the values of all properties are printed out,
            unless they explicitly define a <see cref="M:System.Object.ToString"/>, or implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            in which case each item within is printed out separately.
            </para></remarks>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String"/> representation of.</param>
            <param name="depth">Determines how deep the recursive function should go.</param>
            <param name="useQuotes">
            Determines whether <see cref="T:System.String"/> and <see cref="T:System.Char"/> have a " and ' surrounding them.
            </param>
            <returns><paramref name="source"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Wawa.Modules.Stringifier.UseStringifier``1(``0,System.Int32)">
            <summary>Forces the use of reflective stringification.</summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The item to get a <see cref="T:System.String"/> representation of.</param>
            <param name="depth">The amount of nesting.</param>
            <returns><paramref name="source"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Emik.Morsels.Force">
            <summary>Extension methods to force full enumerations.</summary>
        </member>
        <member name="M:Emik.Morsels.Force.Enumerate(System.Collections.IEnumerable)">
            <summary>Forces an enumeration, meant for enumerations that have side effects.</summary>
            <param name="iterable">The collection of items to go through one-by-one.</param>
        </member>
        <member name="M:Emik.Morsels.Force.Enumerate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Forces an enumeration, meant for enumerations that have side effects.</summary>
            <typeparam name="T">The type of iterator.</typeparam>
            <param name="iterable">The collection of items to go through one-by-one.</param>
        </member>
        <member name="T:Emik.Morsels.MatrixFactory">
            <summary>Extension methods that act as factories for <see cref="T:Emik.Morsels.Matrix`1"/>.</summary>
        </member>
        <member name="M:Emik.Morsels.MatrixFactory.AsMatrix``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Wraps an <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:Emik.Morsels.Matrix`1"/>.</summary>
            <typeparam name="T">The type of the <paramref name="iterator"/> and the <see langword="return"/>.</typeparam>
            <param name="iterator">The collection to turn into a <see cref="T:Emik.Morsels.Matrix`1"/>.</param>
            <param name="countPerList">The length per count.</param>
            <returns>A <see cref="T:Emik.Morsels.Matrix`1"/> that wraps the parameter <paramref name="iterator"/>.</returns>
        </member>
        <member name="M:Emik.Morsels.MatrixFactory.AsMatrix``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32})">
            <summary>Wraps an <see cref="T:System.Collections.Generic.IList`1"/> in a <see cref="T:Emik.Morsels.Matrix`1"/>.</summary>
            <typeparam name="T">The type of the <paramref name="iterator"/> and the <see langword="return"/>.</typeparam>
            <param name="iterator">The collection to turn into a <see cref="T:Emik.Morsels.Matrix`1"/>.</param>
            <param name="countPerList">The length per count.</param>
            <returns>A <see cref="T:Emik.Morsels.Matrix`1"/> that wraps the parameter <paramref name="iterator"/>.</returns>
        </member>
        <member name="T:Emik.Morsels.Matrix`1">
            <summary>Maps a 1-dimensional collection as 2-dimensional.</summary>
            <typeparam name="T">The type of item within the list.</typeparam>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Collections.Generic.IList{`0},System.Func{System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Func{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.#ctor(System.Func{System.Collections.Generic.IList{`0}},System.Func{System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:Emik.Morsels.Matrix`1"/> class.</summary>
            <param name="list">The list to encapsulate.</param>
            <param name="countPerList">The length per count.</param>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.CountPerList">
            <summary>Gets the amount of items per list.</summary>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.List">
            <summary>Gets the encapsulated list.</summary>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Emik.Morsels.Matrix`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count" />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Add(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Contains(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.CopyTo(System.Collections.Generic.IList{`0}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Insert(System.Int32,System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Remove(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.IndexOf(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Emik.Morsels.Matrix`1.Slice">
            <summary>Represents a slice of a matrix.</summary>
            <param name="matrix">The matrix to reference.</param>
            <param name="ordinal">The first index of the matrix.</param>
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.#ctor(Emik.Morsels.Matrix{`0},System.Int32)">
            <summary>Represents a slice of a matrix.</summary>
            <param name="matrix">The matrix to reference.</param>
            <param name="ordinal">The first index of the matrix.</param>
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Slice.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Slice.Count">
            <inheritdoc />
        </member>
        <member name="P:Emik.Morsels.Matrix`1.Slice.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Clear">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Emik.Morsels.Matrix`1.Slice.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Emik.MatchAttribute">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="M:Emik.MatchAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>Initializes a new instance of the <see cref="T:Emik.MatchAttribute"/> class.</summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">The bitwise combination of the enumeration values that modify the regular expression.</param>
        </member>
        <member name="P:Emik.MatchAttribute.Pattern">
            <summary>Gets the regular expression to match.</summary>
        </member>
        <member name="P:Emik.MatchAttribute.Options">
            <summary>Gets the bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.RegexDeconstructors">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
            the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute"/> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.
            The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the
            listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/>
            class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and AttributeTargets.Property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or AttributeTargets.Property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members
            have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Gets the optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>Used to indicate a byref escapes and is not scoped.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/> class.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called in its containing module's initializer.
            </summary>
            <remarks><para>
            When one or more valid methods with this attribute are found in a compilation,
            the compiler will emit a module initializer that calls each of the attributed methods.<br />
            Certain requirements are imposed on any method targeted with this attribute:
            </para><list type="bullet">
            <item><description>The method must be <see langword="static"/>.</description></item>
            <item><description>
            The method must be an ordinary member method, as opposed to a property accessor,
            constructor, local function, and so on.
            </description></item>
            <item><description>The method must be parameterless..</description></item>
            <item><description>The method must return <see langword="void"/>.</description></item>
            <item><description>The method must not be generic or be contained in a generic type.</description></item>
            <item><description>
            The method's effective accessibility must be <see langword="internal"/> or <see langword="public"/>.
            </description></item>
            </list><para>
            For more information, see
            https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller.
            This is the file path at the time of compile.
            </summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/> attribute to an optional parameter that has a default value.
            You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>Indicates that a parameter captures the expression passed for another parameter as a string.</summary>
            <remarks><para>This attribute is implemented in the compiler for C# 10 and later versions only.</para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.</summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>Gets the name of the parameter whose expression should be captured as a string.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks><para>
            This attribute is unsafe because it may reveal uninitialized memory to the application in certain
            instances (e.g., reading from uninitialized stackalloc'd memory). If applied to a method directly,
            the attribute applies to that method and all nested functions (lambdas, local functions) below it.
            If applied to a type or module, it applies to all methods nested inside. This attribute is intentionally
            not permitted on assemblies. Use at the module level instead to apply to multiple type declarations.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Indicates that an API is in preview. This attribute allows call sites to be
            flagged with a diagnostic that indicates that a preview feature is used.
            Authors can use this attribute to ship preview features in their assemblies.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Message">
            <summary>Gets the optional message associated with this attribute instance.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Url">
            <summary>Gets or sets the optional URL associated with this attribute instance.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is
            required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> class.</summary>
            <param name="featureName">The name of the compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>Gets the name of the compiler feature.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether the compiler can choose to allow access to the location
            where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineArrayAttribute.Length">
            <summary>Gets the length of the inlined array.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Instructs the System.Text.RegularExpressions source generator to
            generate an implementation of the specified regular expression.
            </summary>
            <remarks>
            <para>
            The generator associated with this attribute only supports C#. It only supplies an implementation when applied
            to static, partial, parameterless, non-generic methods that are typed to return <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </para>
            <para>
            When the <see cref="T:System.Text.RegularExpressions.Regex"/> supports case-insensitive matches (either by passing
            <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> or using the inline <c>(?i)</c> switch in the pattern) the regex engines
            will use an internal casing table to transform the passed in pattern into an equivalent case-sensitive one.
            For example, given the pattern <c>abc</c>, the engines will transform it to the equivalent pattern
            <c>[Aa][Bb][Cc]</c>. The equivalences found in this internal casing table can change over time, for example in
            the case new characters are added to a new version of Unicode. When using the source generator, this
            transformation happens at compile time, which means the casing table used to find the equivalences will depend
            on the target framework at compile time. This differs from the rest of the <see cref="T:System.Text.RegularExpressions.Regex"/> engines, which
            perform this transformation at run-time, meaning they will always use casing table for the current runtime.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/> class with the specified pattern.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by Windows
            (https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c).
            Culture names follow the standard defined by BCP 47 (https://tools.ietf.org/html/bcp47). In addition,
            starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.</param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the list of
            language/region names supported by Windows
            (https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c).
            Culture names follow the standard defined by BCP 47 (https://tools.ietf.org/html/bcp47). In addition,
            starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds">
            <summary>
            Gets a time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName">
            <summary>Gets the name of the culture to be used for case sensitive comparisons.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern">
            <summary>Gets the regular expression pattern to match.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Options">
            <summary>Gets a bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
    </members>
</doc>
