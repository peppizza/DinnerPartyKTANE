<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wawa.DDL</name>
    </assembly>
    <members>
        <member name="T:Wawa.DDL.Access">
            <summary>A class for accessing things from the game.</summary>
        </member>
        <member name="P:Wawa.DDL.Access.IsKtane">
            <summary>Gets a value indicating whether the runtime is in-game.</summary>
            <remarks><para>Opposite of <see cref="P:UnityEngine.Application.isEditor"/>, but as a pure getter.</para></remarks>
        </member>
        <member name="M:Wawa.DDL.Access.FromGame``2(``0,System.Converter{``0,``1},``1)">
            <summary>Method for obtaining something from the game, ensuring that the Unity editor stays happy.</summary>
            <remarks><para>
            This API primarily exists for if you already have a reference to Assembly-CSharp.dll, typically involving using
            a class library to allow such a reference. If you do not use a class library, then this method can be ignored in
            favor of wrappers such as <see cref="T:Wawa.DDL.Lookup"/>, <see cref="T:Wawa.DDL.Missions"/>, or <see cref="T:Wawa.DDL.Preferences"/>.
            </para><para>
            Unlike the other APIs exposed by these libraries, the return value of <typeparamref name="TResult"/>'s
            nullability may not be trusted if it is a reference type or <see cref="T:System.Nullable`1"/>, even when
            <paramref name="def"/> itself is non-null. As such, enable nullable reference types or use
            <see cref="M:Wawa.Optionals.Maybe.AsMaybe``1(System.Nullable{``0})"/> to enforce type safety.
            </para><para>
            To guarantee the DDL pattern, ensure that <typeparamref name="T"/> and <typeparamref name="TResult"/> are not
            from a potentially unavailable reference, and avoid creating closures that capture state without first
            downcasting to <see cref="T:System.Object"/> beforehand, and recasting within the closure.
            </para><para>
            Never assume functions or fields pulled directly from Assembly-CSharp.dll are safe and guaranteed non-null.
            </para></remarks>
            <typeparam name="T">The context item, be sure that this doesn't come from the game.</typeparam>
            <typeparam name="TResult">The type of the return, be sure that this doesn't come from the game.</typeparam>
            <param name="context">The context element to pass into the callback.</param>
            <param name="factory">The factory containing one or more references that may be unavailable.</param>
            <param name="def">The value to return instead, since <paramref name="factory"/> is for in-game only.</param>
            <returns>The value from <paramref name="factory"/>, or <see langword="default" />.</returns>
        </member>
        <member name="T:Wawa.DDL.KMBombStrikeExtensions">
            <summary>Allows a <see cref="T:KMBomb"/> to control strikes.</summary>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.GetStrikes(KMBomb)">
            <summary>Gets the number of strikes.</summary>
            <remarks><para>In the editor, this value always returns 0.</para></remarks>
            <param name="that">The <see cref="T:KMBomb"/> module instance to grab strikes from.</param>
            <returns>The number of strikes.</returns>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.GetRate(KMBomb,System.Boolean)">
            <summary>Gets the rate in which the timer ticks.</summary>
            <remarks><para>In the editor, this value always returns 1.</para></remarks>
            <param name="that">The <see cref="T:KMBomb"/> module instance to grab the rate from.</param>
            <param name="signFlip">
            When true, invert the returned value when the component from <paramref name="that"/> ticks backwards.
            </param>
            <returns>The speed of the ticking.</returns>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.SetRate(KMBomb,System.Single,System.Boolean)">
            <summary>Sets the rate in which the timer ticks.</summary>
            <remarks><para>In the editor, this method does nothing.</para></remarks>
            <param name="that">The <see cref="T:KMBomb"/> module instance to grab the rate from.</param>
            <param name="value">The value to set it to.</param>
            <param name="signFlip">
            When true, invert <paramref name="value"/> when the component from <paramref name="that"/> ticks backwards.
            </param>
            <returns>The parameter <see cref="T:KMBomb"/>.</returns>
        </member>
        <member name="M:Wawa.DDL.KMBombStrikeExtensions.SetStrikes(KMBomb,System.Int32)">
            <summary>Sets the number of strikes.</summary>
            <remarks><para>In the editor, this method does nothing.</para></remarks>
            <param name="that">The <see cref="T:KMBomb"/> module instance to grab strikes from.</param>
            <param name="value">The value to set it to.</param>
            <returns>The parameter <see cref="T:KMBomb"/>.</returns>
        </member>
        <member name="T:Wawa.DDL.Lookup">
            <summary>Allows for querying general data from the game.</summary>
        </member>
        <member name="P:Wawa.DDL.Lookup.Mods">
            <summary>Gets the dictionary of loaded mods.</summary>
            <remarks><para>
            In the editor, this value returns an instance of <see cref="T:System.Collections.Hashtable"/>, initialized as empty.
            </para></remarks>
        </member>
        <member name="M:Wawa.DDL.Lookup.Localized(System.String)">
            <summary>Gets the localized value of a <see cref="T:System.String"/> term.</summary>
            <remarks><para>In the editor, this value returns <see cref="M:Wawa.Optionals.Maybe.None``1"/>.</para></remarks>
            <param name="term">The term to get the localized <see cref="T:System.String"/> of.</param>
            <returns>The localized <see cref="T:System.String"/> of the parameter <paramref name="term"/>.</returns>
        </member>
        <member name="M:Wawa.DDL.Lookup.ModNameOf(UnityEngine.Component)">
            <summary>Gets the mod name attached to the component.</summary>
            <remarks><para>In the editor, this value returns <see cref="M:Wawa.Optionals.Maybe.None``1"/>.</para></remarks>
            <param name="component">The component to get the mod source from.</param>
            <returns>The mod name attached to the parameter <paramref name="component"/>.</returns>
        </member>
        <member name="T:Wawa.DDL.Missions">
            <summary>Allows access into current mission metadata.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleDescription">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleId">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleLanguageCode">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="F:Wawa.DDL.Missions.ExampleName">
            <summary>The default value for the respective property.</summary>
        </member>
        <member name="P:Wawa.DDL.Missions.IsPacingEvents">
            <summary>Gets or sets a value indicating whether pacing events are enabled.</summary>
            <remarks><para>In the editor, this returns <see keyword="false"/>.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.Description">
            <summary>Gets the description as it appears in the bomb binder.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleDescription"/>.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.Id">
            <summary>Gets the ID of the mission.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleId"/>.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.LanguageCode">
            <summary>Gets the current language code.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleLanguageCode"/>.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Missions.Name">
            <summary>Gets the mission name as it appears in the bomb binder.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Missions.ExampleName"/>.</para></remarks>
        </member>
        <member name="T:Wawa.DDL.Preferences">
            <summary>Allows access into current user preferences.</summary>
        </member>
        <member name="F:Wawa.DDL.Preferences.MaxVolume">
            <summary>The maximum volume allowed by the game and default value for the respective properties.</summary>
        </member>
        <member name="P:Wawa.DDL.Preferences.IsVR">
            <summary>Gets a value indicating whether the game is being played on VR.</summary>
            <remarks><para>In the editor, this value always returns <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Preferences.Music">
            <summary>Gets or sets the current music volume from the dossier menu. Ranges 0 to 100.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Preferences.MaxVolume"/>.</para></remarks>
        </member>
        <member name="P:Wawa.DDL.Preferences.Sound">
            <summary>Gets or sets the current sound effect volume from the dossier menu. Ranges 0 to 100.</summary>
            <remarks><para>In the editor, this returns <see cref="F:Wawa.DDL.Preferences.MaxVolume"/>.</para></remarks>
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
            the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute"/> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.
            The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the
            listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/>
            class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute"/> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and AttributeTargets.Property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or AttributeTargets.Property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members
            have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute"/> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true"/> or <see langword="false"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Gets the optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>Used to indicate a byref escapes and is not scoped.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/> class.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called in its containing module's initializer.
            </summary>
            <remarks><para>
            When one or more valid methods with this attribute are found in a compilation,
            the compiler will emit a module initializer that calls each of the attributed methods.<br />
            Certain requirements are imposed on any method targeted with this attribute:
            </para><list type="bullet">
            <item><description>The method must be <see langword="static"/>.</description></item>
            <item><description>
            The method must be an ordinary member method, as opposed to a property accessor,
            constructor, local function, and so on.
            </description></item>
            <item><description>The method must be parameterless..</description></item>
            <item><description>The method must return <see langword="void"/>.</description></item>
            <item><description>The method must not be generic or be contained in a generic type.</description></item>
            <item><description>
            The method's effective accessibility must be <see langword="internal"/> or <see langword="public"/>.
            </description></item>
            </list><para>
            For more information, see
            https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller.
            This is the file path at the time of compile.
            </summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/> attribute to an optional parameter that has a default value.
            You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>Indicates that a parameter captures the expression passed for another parameter as a string.</summary>
            <remarks><para>This attribute is implemented in the compiler for C# 10 and later versions only.</para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.</summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>Gets the name of the parameter whose expression should be captured as a string.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks><para>
            This attribute is unsafe because it may reveal uninitialized memory to the application in certain
            instances (e.g., reading from uninitialized stackalloc'd memory). If applied to a method directly,
            the attribute applies to that method and all nested functions (lambdas, local functions) below it.
            If applied to a type or module, it applies to all methods nested inside. This attribute is intentionally
            not permitted on assemblies. Use at the module level instead to apply to multiple type declarations.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Indicates that an API is in preview. This attribute allows call sites to be
            flagged with a diagnostic that indicates that a preview feature is used.
            Authors can use this attribute to ship preview features in their assemblies.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Message">
            <summary>Gets the optional message associated with this attribute instance.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Url">
            <summary>Gets or sets the optional URL associated with this attribute instance.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is
            required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> class.</summary>
            <param name="featureName">The name of the compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>Gets the name of the compiler feature.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether the compiler can choose to allow access to the location
            where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineArrayAttribute.Length">
            <summary>Gets the length of the inlined array.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Instructs the System.Text.RegularExpressions source generator to
            generate an implementation of the specified regular expression.
            </summary>
            <remarks>
            <para>
            The generator associated with this attribute only supports C#. It only supplies an implementation when applied
            to static, partial, parameterless, non-generic methods that are typed to return <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </para>
            <para>
            When the <see cref="T:System.Text.RegularExpressions.Regex"/> supports case-insensitive matches (either by passing
            <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> or using the inline <c>(?i)</c> switch in the pattern) the regex engines
            will use an internal casing table to transform the passed in pattern into an equivalent case-sensitive one.
            For example, given the pattern <c>abc</c>, the engines will transform it to the equivalent pattern
            <c>[Aa][Bb][Cc]</c>. The equivalences found in this internal casing table can change over time, for example in
            the case new characters are added to a new version of Unicode. When using the source generator, this
            transformation happens at compile time, which means the casing table used to find the equivalences will depend
            on the target framework at compile time. This differs from the rest of the <see cref="T:System.Text.RegularExpressions.Regex"/> engines, which
            perform this transformation at run-time, meaning they will always use casing table for the current runtime.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/> class with the specified pattern.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by Windows
            (https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c).
            Culture names follow the standard defined by BCP 47 (https://tools.ietf.org/html/bcp47). In addition,
            starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute"/>
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.</param>
            <param name="cultureName">
            The name of a culture to be used for case sensitive comparisons.
            <paramref name="cultureName"/> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the list of
            language/region names supported by Windows
            (https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c).
            Culture names follow the standard defined by BCP 47 (https://tools.ietf.org/html/bcp47). In addition,
            starting with Windows 10, <paramref name="cultureName"/> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName"/> is <see cref="F:System.String.Empty"/>, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds">
            <summary>
            Gets a time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite"/>
            to indicate that the method should not time out.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName">
            <summary>Gets the name of the culture to be used for case sensitive comparisons.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern">
            <summary>Gets the regular expression pattern to match.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Options">
            <summary>Gets a bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.MatchAttribute">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="M:Emik.MatchAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>Initializes a new instance of the <see cref="T:Emik.MatchAttribute"/> class.</summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">The bitwise combination of the enumeration values that modify the regular expression.</param>
        </member>
        <member name="P:Emik.MatchAttribute.Pattern">
            <summary>Gets the regular expression to match.</summary>
        </member>
        <member name="P:Emik.MatchAttribute.Options">
            <summary>Gets the bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.RegexDeconstructors">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
    </members>
</doc>
