// SPDX-License-Identifier: MIT OR Unlicense
// Autogenerated using the Scaffold feature in wawa.Editors.
// Code generated by wawa.Editors is in public domain.
// Source: https://github.com/Emik03/wawa

using System;
using System.Collections;
using System.Linq;
using UnityEngine;
using Wawa.Modules;

/// <summary>On the Subject of <see cref="MusicalChairsModule"/>.</summary>
[RequireComponent(typeof(KMBombModule))]
public sealed class MusicalChairsModule : ModdedModule
{
    private enum State
    {
        Idle,
        Interrogating,
        ShowingResult,
        Accusing,
        IncorrectAccusation,
        Complete,
        Inactive,
        BadInput
    }
    
    [SerializeField] private Button[] buttons;
    [SerializeField] private Button clrButton;
    [SerializeField] private Button interrogateButton;
    [SerializeField] private Button accuseButton;
    [SerializeField] private TextMesh displayText;

    [SerializeField] private float timeInterrogating = 5f;
    [SerializeField] private float timeShowingResult = 5f;
    [SerializeField] private float timeAccusing = 5f;

    private KMAudio _audio;

    private char[] _queryCode;
    private State _currentState;
    private string _lastResult;

    protected override void Awake()
    {
        _audio = GetComponent<KMAudio>();
        
        foreach (var button in buttons)
        {
            button.OnInteract += HandleButton;
        }

        clrButton.OnInteract += HandleClrButton;
        interrogateButton.OnInteract += HandleInterrogateButton;
        accuseButton.OnInteract += HandleAccuseButton;

        _queryCode = new char[3];

        _currentState = State.Inactive;
        UpdateDisplay();

        base.Awake();
    }

    

    protected override void OnActivate()
    {
        //TODO: Make game logic
        
        ChangeState(State.Idle);
    }

    private void HandleButton(char buttonText)
    {
        switch (_currentState)
        {
            case State.Inactive:
                Strike();
                break;
            
            case State.Idle:
                for (var i = 0; i < _queryCode.Length; i++)
                {
                    if (_queryCode[i] != '_') continue;
                    _queryCode[i] = buttonText;
                    break;
                }
                UpdateDisplay();

                break;
            
            default:
                Strike();
                break;
        }
    }

    private void HandleClrButton(char t)
    {
        switch (_currentState)
        {
            case State.Inactive:
                Strike();
                break;
            
            case State.Idle:
                _queryCode = new[] { '_', '_', '_' };
                UpdateDisplay();
                break;
            
            default:
                Strike();
                break;
        }
    }

    private void HandleInterrogateButton(char t)
    {
        switch (_currentState)
        {
            case State.Inactive:
                Strike();
                break;
            
            case State.Idle:        
                if (_queryCode.Contains('_'))
                {
                    ChangeState(State.BadInput);
                    break;
                }
                ChangeState(State.Interrogating);
                break;
            
            default:
                Strike();
                break;
        }
    }

    private void HandleAccuseButton(char t)
    {
        switch (_currentState)
        {
            case State.Inactive:
                Strike();
                break;
            
            case State.Idle:        
                if (_queryCode.Contains('_'))
                {
                    ChangeState(State.BadInput);
                    break;
                }
                ChangeState(State.Accusing);
                break;
            
            default:
                Strike();
                break;
        }
    }

    private void ChangeState(State state)
    {
        if (!gameObject.activeInHierarchy) return;
        
        StopAllCoroutines();
        _currentState = state;

        switch (_currentState)
        {
            case State.Idle:
                _queryCode = new[] { '_', '_', '_' };
                UpdateDisplay();
                break;
            
            case State.Interrogating:
                UpdateDisplay();
                StartCoroutine(DelayedStateChangeCoroutine(timeInterrogating, State.ShowingResult));
                break;
            
            case State.ShowingResult:
                // TODO: actually get result
                _lastResult = new string(_queryCode);
                UpdateDisplay();
                StartCoroutine(DelayedStateChangeCoroutine(timeShowingResult, State.Idle));
                break;
            
            case State.Accusing:
                // TODO: process win or lose
                UpdateDisplay();
                StartCoroutine(DelayedStateChangeCoroutine(timeAccusing, State.Complete));
                break;
            
            case State.IncorrectAccusation:
                UpdateDisplay();
                StartCoroutine(DelayedStateChangeCoroutine(timeShowingResult, State.Idle));
                break;
            
            case State.Complete:
                _audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.CorrectChime, transform);
                Solve();
                UpdateDisplay();
                foreach (var button in buttons)
                {
                    button.IsActive = false;
                }

                clrButton.IsActive = false;
                interrogateButton.IsActive = false;
                accuseButton.IsActive = false;
                
                break;
            
            case State.BadInput:
                UpdateDisplay();
                StartCoroutine(DelayedStateChangeCoroutine(timeShowingResult, State.Idle));
                break;
        }
    }
    private void UpdateDisplay()
    {
        switch (_currentState)
        {
            case State.Inactive:
                displayText.text = string.Empty;
                break;
            
            case State.Idle:
                displayText.text = $"{_queryCode[0]} {_queryCode[1]} {_queryCode[2]}";
                break;
            
            case State.Interrogating:
                displayText.text = "Interrogating";
                break;
            
            case State.ShowingResult:
                displayText.text = _lastResult;
                break;
            
            case State.Accusing:
                displayText.text = "Accusing";
                break;
            
            case State.IncorrectAccusation:
                displayText.text = "INCORRECT";
                break;
            
            case State.Complete:
                displayText.text = "CORRECT";
                break;
            
            case State.BadInput:
                displayText.text = "BAD INPUT";
                break;
            
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
    
    private IEnumerator DelayedStateChangeCoroutine(float delay, State nextState)
    {
        yield return new WaitForSeconds(delay);
        ChangeState(nextState);
    }
}
